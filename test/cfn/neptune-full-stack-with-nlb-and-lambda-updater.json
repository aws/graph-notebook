{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Neptune full stack with a LB and Lambda updater",
  "Parameters": {
    "Env": {
      "Description": "Environment tag, e.g. prod, nonprod.",
      "Default": "test",
      "Type": "String",
      "AllowedPattern": "[a-z0-9]+",
      "MaxLength": 15
    },
    "ClientIPRange": {
      "Description": "Client IP/CIDR to connect to access Neptune from. Check http://checkip.amazonaws.com/ to find yours.",
      "Type": "String",
      "Default": "999.999.999.999/32"
    },
    "DbInstanceType": {
      "Description": "Neptune DB instance type",
      "Type": "String",
      "Default": "db.t3.medium",
      "AllowedValues": [
        "db.t3.medium"
      ],
      "ConstraintDescription": "Must be a valid Neptune instance type."
    },
    "DBReplicaIdentifierSuffix": {
      "Description": "OPTIONAL: The ID for the Neptune Replica to use. Empty means no read replica.",
      "Type": "String",
      "Default": ""
    },
    "NeptuneQueryTimeout": {
      "Type": "Number",
      "Default": 20000,
      "Description": "Neptune Query Time out (in milliseconds)"
    },
    "NeptuneEnableAuditLog": {
      "Type": "Number",
      "Default": 0,
      "AllowedValues": [
        0,
        1
      ],
      "Description": "Enable Audit Log. 0 means disable and 1 means enable."
    },
    "IamAuthEnabled": {
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Description": "Enable IAM Auth for Neptune."
    },
    "LoadBalancerScheme": {
      "Type": "String",
      "Default": "internet-facing",
      "AllowedValues": [
        "internet-facing",
        "internal"
      ],
      "Description": "Specifies whether the load balancer is internal or Internet-facing."
    },
    "AttachBulkloadIAMRoleToNeptuneCluster": {
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Description": "Attach Bulkload IAM role to cluster"
    },
    "S3BucketName": {
      "Type": "String",
      "Description": "Enter the S3 Bucket name that you want to store Neptune's IP addresses",
      "MinLength": 1,
      "ConstraintDescription": "Must be a valid s3 bucket name."
    },
    "DBClusterPort": {
      "Type": "String",
      "Default": "8182",
      "Description": "Enter the traffic listener port of your Neptune cluster listening to"
    },
    "MAXDNSLookupPerInvocation": {
      "Type": "Number",
      "Default": 50,
      "Description": "Please specify the max DNS lookup this function can perform per invocation"
    },
    "InvocationBeforeDeregistration": {
      "Type": "Number",
      "Default": 3,
      "Description": "Please specify how many invocations are needed before a IP is deregistered"
    },
    "CWMetricFlagIPCount": {
      "Type": "String",
      "Default": "True",
      "AllowedValues": [
        "True",
        "False"
      ],
      "Description": "Please specify if you want the Lambda function to create a CloudWatch metric to track IP count of your Neptune DNS "
    },
    "LambdaIAMRoleArn": {
      "Description": "IAM Role arn to pass to lambda",
      "Type" : "String"
    }
  },
  "Conditions": {
    "CreateDBReplicaInstance": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DBReplicaIdentifierSuffix"
            },
            ""
          ]
        }
      ]
    },
    "CreateVPCEndpointService": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "LoadBalancerScheme"
            },
            "internet-facing"
          ]
        }
      ]
    },
    "AZ3NotPresent": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "ca-central-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-west-1"
          ]
        }
      ]
    },
    "AZ3Present": {
      "Fn::Not": [
        {
          "Condition": "AZ3NotPresent"
        }
      ]
    }
  },
  "Resources": {
    "NeptuneStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://s3.amazonaws.com/aws-neptune-customer-samples/v2/cloudformation-templates/neptune-base-stack.json"
            ]
          ]
        },
        "TimeoutInMinutes": "30",
        "Parameters": {
          "Env": {
            "Ref": "Env"
          },
          "DBReplicaIdentifierSuffix": {
            "Ref": "DBReplicaIdentifierSuffix"
          },
          "DBClusterPort": {
            "Ref": "DBClusterPort"
          },
          "DbInstanceType": {
            "Ref": "DbInstanceType"
          },
          "NeptuneQueryTimeout": {
            "Ref": "NeptuneQueryTimeout"
          },
          "NeptuneEnableAuditLog": {
            "Ref": "NeptuneEnableAuditLog"
          },
          "IamAuthEnabled": {
            "Ref": "IamAuthEnabled"
          }
        }
      }
    },
    "NeptuneLBWithLambdaUpdaterStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://neptune-dev-workbench-github-cloud-formation.s3.amazonaws.com/neptune_nlb_with_updater_lambda.json"
            ]
          ]
        },
        "TimeoutInMinutes": "30",
        "Parameters": {
          "EnvironmentName": {
            "Ref": "Env"
          },
          "VPC": {
            "Fn::GetAtt": [
              "NeptuneStack",
              "Outputs.VPC"
            ]
          },
          "InternetGateway": {
            "Fn::GetAtt": [
              "NeptuneStack",
              "Outputs.InternetGateway"
            ]
          },
          "LoadBalancerScheme": {
            "Ref": "LoadBalancerScheme"
          },
          "NeptuneClusterDNS": {
            "Fn::GetAtt": [
              "NeptuneStack",
              "Outputs.DBClusterEndpoint"
            ]
          },
          "S3BucketName": {
            "Ref": "S3BucketName"
          },
          "NeptuneClusterPort": {
            "Fn::GetAtt": [
              "NeptuneStack",
              "Outputs.DBClusterPort"
            ]
          },
          "MAXDNSLookupPerInvocation": {
            "Ref": "MAXDNSLookupPerInvocation"
          },
          "InvocationBeforeDeregistration": {
            "Ref": "InvocationBeforeDeregistration"
          },
          "CWMetricFlagIPCount": {
            "Ref": "CWMetricFlagIPCount"
          },
          "ClientIPRange": {
            "Ref": "ClientIPRange"
          },
          "LambdaIAMRoleArn": {
            "Ref": "LambdaIAMRoleArn"
          }
        }
      }
    }
  },
  "Outputs": {
    "DBClusterId": {
      "Description": "Neptune Cluster Identifier",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.DBClusterId"
        ]
      }
    },
    "DBSubnetGroupId": {
      "Description": "Neptune DBSubnetGroup Identifier",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.DBSubnetGroupId"
        ]
      }
    },
    "DBClusterResourceId": {
      "Description": "Neptune Cluster Resource Identifier",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.DBClusterResourceId"
        ]
      }
    },
    "DBClusterEndpoint": {
      "Description": "Master Endpoint for Neptune Cluster",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.DBClusterEndpoint"
        ]
      }
    },
    "DBInstanceEndpoint": {
      "Description": "Master Instance Endpoint",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.DBInstanceEndpoint"
        ]
      }
    },
    "DBReplicaInstanceEndpoint": {
      "Description": "ReadReplica Instance Endpoint",
      "Condition": "CreateDBReplicaInstance",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.DBReplicaInstanceEndpoint"
        ]
      }
    },
    "SparqlEndpoint": {
      "Description": "Sparql Endpoint for Neptune",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.SparqlEndpoint"
        ]
      }
    },
    "GremlinEndpoint": {
      "Description": "Gremlin Endpoint for Neptune",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.GremlinEndpoint"
        ]
      }
    },
    "LoaderEndpoint": {
      "Description": "Loader Endpoint for Neptune",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.LoaderEndpoint"
        ]
      }
    },
    "DBClusterReadEndpoint": {
      "Description": "DB cluster Read Endpoint",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.DBClusterReadEndpoint"
        ]
      }
    },
    "DBClusterPort": {
      "Description": "Port for the Neptune Cluster",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.DBClusterPort"
        ]
      }
    },
    "NeptuneLoadFromS3IAMRoleArn": {
      "Description": "IAM Role for loading data in Neptune",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.NeptuneLoadFromS3IAMRoleArn"
        ]
      }
    },
    "NeptuneIamAuthUser": {
      "Description": "IAM User for IAM Auth",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.NeptuneIamAuthUser"
        ]
      }
    },
    "VPC": {
      "Description": "VPC",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.VPC"
        ]
      }
    },
    "PrivateSubnet1": {
      "Description": "Private Subnet1",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.PrivateSubnet1"
        ]
      }
    },
    "PrivateSubnet2": {
      "Description": "Private Subnet2",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.PrivateSubnet2"
        ]
      }
    },
    "PrivateSubnet3": {
      "Description": "Private Subnet3",
      "Condition": "AZ3Present",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.PrivateSubnet3"
        ]
      }
    },
    "PublicSubnet1": {
      "Description": "Public Subnet1",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneStack",
          "Outputs.PublicSubnet1"
        ]
      }
    },
    "LBLoadBalancerDNS": {
      "Description": "DNS of LB which is listening at port 80",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneLBWithLambdaUpdaterStack",
          "Outputs.LoadBalancerDNS"
        ]
      }
    },
    "LBLoadBalancerSparqlEndpoint": {
      "Description": "LB Load Balancer Sparql Endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "NeptuneLBWithLambdaUpdaterStack",
                "Outputs.LoadBalancerDNS"
              ]
            },
            "/sparql"
          ]
        ]
      }
    },
    "LBLoadBalancerGremlinEndpoint": {
      "Description": "LB Load Balancer Gremlin Endpoint for Neptune",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "NeptuneLBWithLambdaUpdaterStack",
                "Outputs.LoadBalancerDNS"
              ]
            },
            "/gremlin"
          ]
        ]
      }
    },
    "LBLoadBalancerLoaderEndpoint": {
      "Description": "LB Load Balancer Loader Endpoint for Neptune",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "NeptuneLBWithLambdaUpdaterStack",
                "Outputs.LoadBalancerDNS"
              ]
            },
            "/loader"
          ]
        ]
      }
    },
    "LoadBalancer": {
      "Description": "A reference to the Load Balancer",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneLBWithLambdaUpdaterStack",
          "Outputs.LoadBalancer"
        ]
      }
    },
    "VPCEndpointService": {
      "Description": "ID of the VPC endpoint service configuration.",
      "Condition": "CreateVPCEndpointService",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneLBWithLambdaUpdaterStack",
          "Outputs.VPCEndpointService"
        ]
      }
    },
    "Listener": {
      "Description": "A reference to a port 80 listener",
      "Value": {
        "Fn::GetAtt": [
          "NeptuneLBWithLambdaUpdaterStack",
          "Outputs.Listener"
        ]
      }
    }
  }
}