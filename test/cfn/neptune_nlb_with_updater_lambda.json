{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template of Register Neptune DNS as IP target for Load Balancer",
  "Parameters": {
    "EnvironmentName": {
      "Description": "An environment name that will be prefixed to resource names",
      "Type": "String",
      "Default": "test"
    },
    "VPC": {
      "Type": "String",
      "Default": "",
      "Description": "Neptune VPC"
    },
    "InternetGateway": {
      "Type": "String",
      "Default": "",
      "Description": "Neptune InternetGateway"
    },
    "NeptuneClusterDNS": {
      "Type": "String",
      "Default": "",
      "Description": "Enter the DNS name of your cluster"
    },
    "LoadBalancerScheme": {
      "Type": "String",
      "Default": "internet-facing",
      "AllowedValues": [
        "internet-facing",
        "internal"
      ],
      "Description": "Specifies whether the load balancer is internal or Internet-facing."
    },
    "S3BucketName": {
      "Type": "String",
      "Default": "",
      "Description": "Enter the S3 Bucket name that you want to store Neptune's IP addresses"
    },
    "NeptuneClusterPort": {
      "Type": "String",
      "Default": "",
      "Description": "Enter the traffic listener port of your Neptune cluster listening to"
    },
    "MAXDNSLookupPerInvocation": {
      "Type": "Number",
      "Default": 50,
      "Description": "Please specify the max DNS lookup this function can perform per invocation"
    },
    "InvocationBeforeDeregistration": {
      "Type": "Number",
      "Default": 3,
      "Description": "Please specify how many invocations are needed before a IP is deregistered"
    },
    "CWMetricFlagIPCount": {
      "Type": "String",
      "Default": "True",
      "AllowedValues": [
        "True",
        "False"
      ],
      "Description": "Please specify if you want the Lambda function to create a CloudWatch metric to track IP count of your Neptune DNS "
    },
    "ClientIPRange": {
      "Description": "Client IP/CIDR to connect to access Neptune from. Check http://checkip.amazonaws.com/ to find yours.",
      "Type": "String",
      "Default": "999.999.999.999/32"
    },
    "LambdaIAMRoleArn": {
      "Description": "IAM Role to pass to lambda",
      "Type": "String"
    }
  },
  "Conditions": {
    "CreateVPCEndpointService": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "LoadBalancerScheme"
            },
            "internet-facing"
          ]
        }
      ]
    },
    "AZ3NotPresent": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "ca-central-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "us-west-1"
          ]
        }
      ]
    },
    "AZ3Present": {
      "Fn::Not": [
        {
          "Condition": "AZ3NotPresent"
        }
      ]
    }
  },
  "Resources": {
    "NeptuneTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Port": {
          "Ref": "NeptuneClusterPort"
        },
        "Protocol": "TCP",
        "TargetType": "ip"
      }
    },
    "LoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "LoadBalancer"
        },
        "Port": 80,
        "Protocol": "TCP",
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "NeptuneTargetGroup"
            }
          }
        ]
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Subnets": {
          "Fn::If": [
            "AZ3Present",
            [
              {
                "Ref": "LambdaSubnet1"
              },
              {
                "Ref": "LambdaSubnet2"
              },
              {
                "Ref": "LambdaSubnet3"
              }
            ],
            [
              {
                "Ref": "LambdaSubnet1"
              },
              {
                "Ref": "LambdaSubnet2"
              }
            ]
          ]
        },
        "Type": "network",
        "Scheme": {
          "Ref": "LoadBalancerScheme"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "EnvironmentName"
            }
          }
        ]
      }
    },
    "LambdaSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "172.30.5.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Subnet for Lambda (AZ1)"
            }
          }
        ]
      }
    },
    "LambdaSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "172.30.6.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Subnet for Lambda (AZ2)"
            }
          }
        ]
      }
    },
    "LambdaSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Condition": "AZ3Present",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            2,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "172.30.7.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Subnet for Lambda (AZ3)"
            }
          }
        ]
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Routes"
            }
          }
        ]
      }
    },
    "DefaultPublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "LambdaSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "LambdaSubnet1"
        }
      }
    },
    "LambdaSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "LambdaSubnet2"
        }
      }
    },
    "LambdaSubnet3RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Condition": "AZ3Present",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "LambdaSubnet3"
        }
      }
    },
    "VPCEndpointService": {
      "Type": "AWS::EC2::VPCEndpointService",
      "Condition": "CreateVPCEndpointService",
      "Properties": {
        "NetworkLoadBalancerArns": [
          {
            "Ref": "LoadBalancer"
          }
        ],
        "AcceptanceRequired": "false"
      }
    },
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "",
              [
                "aws-neptune-customer-samples-",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": "lambda/neptune_nlb_lambda_demo.zip"
        },
        "Description": "Register DNS to Load Balancer",
        "Handler": "nlb_lambda_function.lambda_handler",
        "Timeout": 30,
        "Role": {
          "Ref": "LambdaIAMRoleArn"
        },
        "Runtime": "python2.7",
        "Environment": {
          "Variables": {
            "NEPTUNE_CLUSTER_DNS": {
              "Ref": "NeptuneClusterDNS"
            },
            "LB_TG_ARN": {
              "Ref": "NeptuneTargetGroup"
            },
            "S3_BUCKET": {
              "Ref": "S3BucketName"
            },
            "MAX_LOOKUP_PER_INVOCATION": {
              "Ref": "MAXDNSLookupPerInvocation"
            },
            "INVOCATIONS_BEFORE_DEREGISTRATION": {
              "Ref": "InvocationBeforeDeregistration"
            },
            "CW_METRIC_FLAG_IP_COUNT": {
              "Ref": "CWMetricFlagIPCount"
            },
            "NEPTUNE_CLUSTER_PORT": {
              "Ref": "NeptuneClusterPort"
            }
          }
        }
      }
    },
    "ScheduledRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "ScheduledRule",
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": "TargetFunctionV1"
          }
        ]
      },
      "DependsOn": [
        "LambdaFunction"
      ]
    },
    "LambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunction",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "Action": "lambda:InvokeFunction",
        "SourceArn": {
          "Fn::GetAtt": [
            "ScheduledRule",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "LoadBalancer": {
      "Description": "A reference to the Application Load Balancer",
      "Value": {
        "Ref": "LoadBalancer"
      }
    },
    "VPCEndpointService": {
      "Description": "ID of the VPC endpoint service configuration.",
      "Condition": "CreateVPCEndpointService",
      "Value": {
        "Ref": "VPCEndpointService"
      }
    },
    "LoadBalancerDNS": {
      "Description": "The DNS of the LB",
      "Value": {
        "Fn::GetAtt": [
          "LoadBalancer",
          "DNSName"
        ]
      }
    },
    "Listener": {
      "Description": "A reference to a port 80 listener",
      "Value": {
        "Ref": "LoadBalancerListener"
      }
    }
  }
}